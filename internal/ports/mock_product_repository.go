// Code generated by mockery v2.46.2. DO NOT EDIT.

package ports

import (
	domain "product-api/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockProductRepository is an autogenerated mock type for the MockProductRepository type
type MockProductRepository struct {
	mock.Mock
}

// GetProductByID provides a mock function with given fields: id
func (_m *MockProductRepository) GetProductByID(id string) (*domain.Product, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: ids
func (_m *MockProductRepository) GetProducts(ids []string) ([]*domain.Product, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 []*domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*domain.Product, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []*domain.Product); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockProductRepository creates a new instance of MockProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepository {
	mock := &MockProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
